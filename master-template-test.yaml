AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.nano
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - g3.8xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r3.12xlarge
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2
  ServiceName:
    Type: String
    Default: nginx
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: nginx
    Description: The url of a docker image that contains the application process that
      will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 80
    Description: What port number the application inside the docker container is binding
      to
  ContainerCpu:
    Type: Number
    Default: 256
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 512
    Description: How much memory in megabytes to give the container
  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed
      to
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroups:
    Description: Choose which security group you want to apply
    Type: List<AWS::EC2::SecurityGroup::Id>
  RoleArn:
    Type: String
    Default: arn:aws:iam::155603667260:role/eks-cluster
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: test
  CacheInstanceType:
    Description: Which instance type should we use to build the ECS cluster?
    Type: String
    Default: cache.t3.medium
  CacheSecurityGroups:
    Description: Select the Security Group to use for the ECS cluster hosts
    Type: AWS::EC2::SecurityGroup::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Type: AWS::EC2::VPC::Id
  myHttpEndpoint:
    Type: String
    Default: http://www.test.com
  OperatorEmail:
    Description: Email address to notify when new logs are published.
    Type: String
    Default: test.login319@gmail.com
  DatabaseName:
    Type: String
    Default: mydatabase
  EngineVersion:
    Type: String
    Default: '5.6'
  MasterUsername:
    Type: String
    Default: root
  MasterUserPassword:
    Type: String
    NoEcho: true
    Default: masterpassword
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Default: dbuser
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Default: dbpassword
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
Resources:
  myDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: mybucket.s3.amazonaws.com
            Id: myS3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1
                - TLSv1.1
                - TLSv1.2
        Enabled: 'true'
        Comment: Some comment
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: myS3Origin
          ViewerProtocolPolicy: https-only
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
        ViewerCertificate:
          MinimumProtocolVersion: TLSv1.2_2021
          CloudFrontDefaultCertificate: 'true'
  CT:
    Type: AWS::CloudTrail::Trail
    Properties:
      IsLogging: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      IncludeGlobalServiceEvents: true
      S3BucketName: !Ref 'S3Bucket'
    DependsOn:
      - Topic
      - S3BucketPolicy
  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ComputePlatform: Lambda
  BasicEndpoint:
    Type: AWS::DMS::Endpoint
    Properties:
      DatabaseName: my-db
      EndpointType: target
      EngineName: postgres
      Password: PasswordParameter
      Port: 1234
      SslMode: require
      ServerName: server.db.amazon.com
      Tags:
        - Key: type
          Value: new
      Username: username
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      ImageId: !Ref 'LatestAmiId'
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: 0
  NewVolume:
    Type: AWS::EC2::Volume
    Properties:
      Size: 100
      Encrypted: 'true'
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: AWS::Region
  MyRepository:
    Type: AWS::ECR::Repository
    Properties:
      ImageTagMutability: IMMUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256
      ImageScanningConfiguration:
        ScanOnPush: true
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          ReadonlyRootFilesystem: true
  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      PerformanceMode: maxIO
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_30_DAYS
      FileSystemTags:
        - Key: Name
          Value: TestFileSystem
      FileSystemPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: '*'
            Principal: '*'
      KmsKeyId: !GetAtt 'key.Arn'
  key:
    Type: AWS::KMS::Key
    Properties:
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - :root
            Action:
              - kms:*
            Resource:
              - '*'
  myCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: prod
      RoleArn: !Ref 'RoleArn'
      ResourcesVpcConfig:
        SecurityGroupIds: !Ref 'SecurityGroups'
        SubnetIds: !Ref 'Subnets'
  CacheSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      CacheSubnetGroupName: !Sub '${EnvironmentName}-Subnet-${AWS::Region}'
      Description: The subnet group for the reactive application architecture
      SubnetIds: !Ref 'Subnets'
  ReplicationGroup:
    Type: AWS::ElastiCache::ReplicationGroup
    Properties:
      KmsKeyId: !GetAtt 'key.Arn'
      CacheNodeType: !Ref 'CacheInstanceType'
      CacheSubnetGroupName: !Ref 'CacheSubnetGroup'
      Engine: redis
      EngineVersion: 6.x
      NumCacheClusters: 2
      Port: 6379
      ReplicationGroupDescription: !Sub '${EnvironmentName}-ReplicationGroup-${AWS::Region}'
      SecurityGroupIds:
        - !Ref 'CacheSecurityGroups'
      AutomaticFailoverEnabled: true
      TransitEncryptionEnabled: true
      AtRestEncryptionEnabled: true
      AutoMinorVersionUpgrade: true
      CacheSecurityGroupNames: []
  BasicNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      InstanceType: ml.t2.large
      RoleArn: !GetAtt 'ExecutionRole.Arn'
      KmsKeyId: !GetAtt 'key.Arn'
      RootAccess: Disabled
      DirectInternetAccess: Disabled
      SubnetId: !Ref 'SubnetId'
      SecurityGroupIds: !Ref 'SecurityGroups'
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: test1
      ElasticsearchVersion: '7.10'
      NodeToNodeEncryptionOptions:
        Enabled: true
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: true
        InstanceCount: '2'
        ZoneAwarenessEnabled: true
        InstanceType: m5.large.elasticsearch
        DedicatedMasterType: m5.large.elasticsearch
        DedicatedMasterCount: '3'
      EBSOptions:
        EBSEnabled: true
        Iops: '0'
        VolumeSize: '20'
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  AssumeDeveloperRolePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowAllUsersToListAccounts
            Effect: Allow
            Action: '*'
            Resource: '*'
  CFNUser:
    Type: AWS::IAM::User
    Properties:
      LoginProfile:
        Password: Test@1234
  CFNAdminGroup:
    Type: AWS::IAM::Group
    Properties:
      Policies:
        - PolicyName: myapppolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: '*'
                Resource: '*'
  InputStreamCFB159EA:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 16
      RetentionPeriodHours: 24
      StreamEncryption:
        EncryptionType: KMS
        KeyId: alias/aws/kinesis
  myKey:
    Type: AWS::KMS::Key
    Properties:
      Enabled: true
      Description: An example symmetric CMK
      EnableKeyRotation: true
      PendingWindowInDays: 20
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: '*'
            Action: kms:*
            Resource: '*'
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:Create*
              - kms:Describe*
              - kms:Enable*
              - kms:List*
              - kms:Put*
              - kms:Update*
              - kms:Revoke*
              - kms:Disable*
              - kms:Get*
              - kms:Delete*
              - kms:ScheduleKeyDeletion
              - kms:CancelKeyDeletion
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - kms:DescribeKey
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: '*'
  BasicBroker:
    Type: AWS::AmazonMQ::Broker
    Properties:
      AutoMinorVersionUpgrade: 'false'
      BrokerName: MyBasicRabbitBroker
      DeploymentMode: SINGLE_INSTANCE
      EngineType: RabbitMQ
      EngineVersion: 3.8.6
      HostInstanceType: mq.t3.micro
      PubliclyAccessible: 'false'
      Users:
        - Password: AmazonMqPassword
          Username: AmazonMqUsername
  MyNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref 'VpcId'
  EC2NetworkAclentryIngress1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 1
      Egress: false
      Protocol: 1
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22
  EC2NetworkAclentryIngress2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 2
      Egress: false
      Protocol: 1
      RuleAction: allow
      Ipv6CidrBlock: ::/0
      PortRange:
        From: 22
        To: 22
  EC2NetworkAclentryIngress3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 3
      Egress: false
      Protocol: -1
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22
  EC2NetworkAclentryEngress1:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 4
      Egress: true
      Protocol: 1
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22
  EC2NetworkAclentryEngress2:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 5
      Egress: true
      Protocol: 1
      RuleAction: allow
      Ipv6CidrBlock: ::/0
      PortRange:
        From: 22
        To: 22
  EC2NetworkAclentryEngress3:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      Icmp:
        Code: -1
        Type: -1
      NetworkAclId: !Ref 'MyNACL'
      RuleNumber: 6
      Egress: true
      Protocol: -1
      RuleAction: allow
      CidrBlock: '0.0.0.0/0'
      PortRange:
        From: 22
        To: 22
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
    DeletionPolicy: Retain
  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Id: CrossAccessPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: CrossAccPolicyDoc
            Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal: '*'
          - Sid: HttpsOnly
            Action:
              - s3:DeleteObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal: '*'
            Condition:
              StringLike:
                aws:SecureTransport: true
          - Sid: IPAllow
            Action:
              - s3:PutObject
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'
            Principal: '*'
  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      Encrypted: true
      PubliclyAccessible: false
      DBName: mydb
      MasterUsername: master
      MasterUserPassword: Root12345
      NodeType: ds2.xlarge
      ClusterType: single-node
  RedshiftClusterParameterGroup:
    Type: AWS::Redshift::ClusterParameterGroup
    Properties:
      Description: Cluster parameter group
      ParameterGroupFamily: redshift-1.0
      Parameters:
        - ParameterName: enable_user_activity_logging
          ParameterValue: true
        - ParameterName: require_ssl
          ParameterValue: true
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via internet
      GroupName: test
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '445'
          ToPort: '445'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '53'
          ToPort: '53'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '20'
          ToPort: '23'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '20'
          ToPort: '20'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '4333'
          ToPort: '4333'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '137'
          ToPort: '137'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '138'
          ToPort: '138'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '5432'
          ToPort: '5432'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '25'
          ToPort: '25'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '1433'
          ToPort: '1433'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '1434'
          ToPort: '1434'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '23'
          ToPort: '23'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '5500'
          ToPort: '5500'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '5900'
          ToPort: '5900'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '135'
          ToPort: '135'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIpv6: ::/0
        - IpProtocol: '-1'
          FromPort: '22'
          ToPort: '22'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '8001'
          ToPort: '8001'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '8332'
          ToPort: '8333'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '8545'
          ToPort: '8545'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '30303'
          ToPort: '30303'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '1521'
          ToPort: '1521'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '5000'
          ToPort: '5000'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '5984'
          ToPort: '5984'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '6379'
          ToPort: '6380'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '9042'
          ToPort: '9042'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '11211'
          ToPort: '11211'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '27017'
          ToPort: '27017'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '28015'
          ToPort: '28015'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '29015'
          ToPort: '29015'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '50000'
          ToPort: '50000'
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: '69'
          ToPort: '69'
          CidrIpv6: ::/0
  TestCluster:
    Type: AWS::MSK::Cluster
    Properties:
      ClusterName: ClusterWithAllProperties
      KafkaVersion: 2.2.1
      NumberOfBrokerNodes: 2
      EnhancedMonitoring: PER_BROKER
      EncryptionInfo:
        EncryptionAtRest:
          DataVolumeKMSKeyId: ''
        EncryptionInTransit:
          ClientBroker: PLAINTEXT
          InCluster: false
      Tags:
        Environment: Test
        Owner: QATeam
      BrokerNodeGroupInfo:
        BrokerAZDistribution: DEFAULT
        InstanceType: kafka.m5.large
        SecurityGroups: !Ref 'SecurityGroups'
        StorageInfo:
          EBSStorageInfo:
            VolumeSize: 100
        ClientSubnets: !Ref 'Subnets'
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        - Endpoint: !Ref 'OperatorEmail'
          Protocol: email
      KmsMasterKeyId: String<The ID of an AWS managed customer master key (CMK) for
        Amazon SNS or a custom CMK>
  TopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref 'Topic'
      PolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Sid: AWSCloudTrailSNSPolicy
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Resource: '*'
            Action: SNS:Publish
  SCMSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref 'Topic'
      Endpoint: !Ref 'myHttpEndpoint'
      Protocol: http
      DeliveryPolicy:
        healthyRetryPolicy:
          numRetries: 20
          minDelayTarget: 10
          maxDelayTarget: 30
          numMinDelayRetries: 3
          numMaxDelayRetries: 17
          numNoDelayRetries: 0
          backoffFunction: exponential
  Cluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora
      EngineMode: serverless
      EngineVersion: !Ref 'EngineVersion'
      DatabaseName: !Ref 'DatabaseName'
      MasterUsername: !Ref 'MasterUsername'
      MasterUserPassword: !Ref 'MasterUserPassword'
      BackupRetentionPeriod: 7
      DeletionProtection: true
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref 'CacheSecurityGroups'
  myDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '100'
      DBInstanceClass: db.t2.small
      Engine: MySQL
      Iops: '1000'
      MasterUsername: !Ref 'DBUser'
      MasterUserPassword: !Ref 'DBPassword'
      StorageEncrypted: true
      MultiAZ: true
      CopyTagsToSnapshot: true
      BackupRetentionPeriod: 7
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: true
  mySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref 'VpcId'
      CidrBlock: 172.31.48.0/20
      AvailabilityZone: !Select
        - '0'
        - !GetAZs
          Ref: AWS::Region
