AWSTemplateFormatVersion: '2010-09-09'
Description: "Example REST API with a Lambda authorizer. To invoke the API, clients\
  \ must include specific\nheader and query string values in the request.\n"
Resources:
  MyAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: example-rest-api-with-auth
      EndpointConfiguration:
        Types:
          - EDGE
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: MyAPI
        - Key: resource_type
          Value: AWS::ApiGateway::RestApi
        - Key: prancer_unique_id
          Value: f9169a3a-142b-4b84-93c1-d8976962862b
  MyAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      AuthorizerCredentials: !GetAtt 'InvokeRole.Arn'
      AuthorizerUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyAuthFunction.Arn}/invocations'
      IdentitySource: method.request.header.HeaderAuth1,method.request.querystring.QueryString1
      Name: my-authorizer
      RestApiId: !Ref 'MyAPI'
      Type: COGNITO_USER_POOLS
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: MyAuthorizer
        - Key: resource_type
          Value: AWS::ApiGateway::Authorizer
        - Key: prancer_unique_id
          Value: '0a07a50d-b2bc-4ba1-ada9-48cb83c46f46'
  Method:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref 'PetsResource'
      RestApiId: !Ref 'MyAPI'
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        Uri: http://petstore.execute-api.us-west-1.amazonaws.com/petstore/pets
        IntegrationHttpMethod: GET
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: Method
        - Key: resource_type
          Value: AWS::ApiGateway::Method
        - Key: prancer_unique_id
          Value: 381edda6-ca59-4d09-802d-0565dda284f7
  Deployment:
    DependsOn: Method
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref 'MyAPI'
      StageName: tempstage
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: Deployment
        - Key: resource_type
          Value: AWS::ApiGateway::Deployment
        - Key: prancer_unique_id
          Value: 35863c4c-f9f2-4f20-a4e4-b659115ca351
  InvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: invokeauth
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt 'MyAuthFunction.Arn'
        - PolicyName: invokelambdaproxy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt 'MyProxyFunction.Arn'
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: InvokeRole
        - Key: resource_type
          Value: AWS::IAM::Role
        - Key: prancer_unique_id
          Value: a2549531-eac8-45d4-9615-ccf2e91acab8
  MyAuthFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt 'FunctionExecutionRole.Arn'
      Handler: index.handler
      Code:
        ZipFile: "exports.handler = function(event, context, callback) {\n  console.log('Received\
          \ event:', JSON.stringify(event, null, 2));\n  // A simple request-based\
          \ authorizer example to demonstrate how to use request\n  // parameters\
          \ to allow or deny a request. In this example, a request is\n  // authorized\
          \ if the client-supplied HeaderAuth1 header and QueryString1\n  // query\
          \ parameter match 'headerValue1' and 'queryValue1'.\n  // Retrieve request\
          \ parameters from the Lambda function input:\n  var headers = event.headers;\n\
          \  var queryStringParameters = event.queryStringParameters;\n  var pathParameters\
          \ = event.pathParameters;\n  var stageVariables = event.stageVariables;\n\
          \      \n  // Parse the input for the parameter values\n  var tmp = event.methodArn.split(':');\n\
          \  var apiGatewayArnTmp = tmp[5].split('/');\n  var awsAccountId = tmp[4];\n\
          \  var region = tmp[3];\n  var restApiId = apiGatewayArnTmp[0];\n  var stage\
          \ = apiGatewayArnTmp[1];\n  var method = apiGatewayArnTmp[2];\n  var resource\
          \ = '/'; // root resource\n  if (apiGatewayArnTmp[3]) {\n      resource\
          \ += apiGatewayArnTmp[3];\n  }\n      \n  // Perform authorization to return\
          \ the Allow policy for correct parameters and \n  // the 'Unauthorized'\
          \ error, otherwise.\n  var authResponse = {};\n  var condition = {};\n \
          \ condition.IpAddress = {};\n  \n  if (headers.HeaderAuth1 === \"headerValue1\"\
          \n      && queryStringParameters.QueryString1 === \"queryValue1\") {\n \
          \     callback(null, generateAllow('me', event.methodArn));\n  }  else {\n\
          \      callback(\"Unauthorized\");\n  }\n  }\n  \n  // Helper function to\
          \ generate an IAM policy\n  var generatePolicy = function(principalId, effect,\
          \ resource) {\n  // Required output:\n  var authResponse = {};\n  authResponse.principalId\
          \ = principalId;\n  if (effect && resource) {\n      var policyDocument\
          \ = {};\n      policyDocument.Version = '2012-10-17'; // default version\n\
          \      policyDocument.Statement = [];\n      var statementOne = {};\n  \
          \    statementOne.Action = 'execute-api:Invoke'; // default action\n   \
          \   statementOne.Effect = effect;\n      statementOne.Resource = resource;\n\
          \      policyDocument.Statement[0] = statementOne;\n      authResponse.policyDocument\
          \ = policyDocument;\n  }\n  // Optional output with custom properties of\
          \ the String, Number or Boolean type.\n  authResponse.context = {\n    \
          \  \"stringKey\": \"stringval\",\n      \"numberKey\": 123,\n      \"booleanKey\"\
          : true\n  };\n  return authResponse;\n  }\n      \n  var generateAllow =\
          \ function(principalId, resource) {\n      return generatePolicy(principalId,\
          \ 'Allow', resource);\n  }\n      \n  var generateDeny = function(principalId,\
          \ resource) {\n      return generatePolicy(principalId, 'Deny', resource);\n\
          \  }\n"
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: MyAuthFunction
        - Key: resource_type
          Value: AWS::Lambda::Function
        - Key: prancer_unique_id
          Value: 4107b2ed-67d2-45b0-82a7-14e61eab8e13
  MyProxyFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt 'FunctionExecutionRole.Arn'
      Handler: index.handler
      Code:
        ZipFile: "exports.handler = async (event) => {\n    const response = {\n \
          \       statusCode: 200,\n        body: JSON.stringify('Hello from Lambda!'),\n\
          \    };\n    return response;\n};\n"
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: MyProxyFunction
        - Key: resource_type
          Value: AWS::Lambda::Function
        - Key: prancer_unique_id
          Value: ef12d8b7-7fe3-4e54-b318-a2c02be0d1d8
  FunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: FunctionExecutionRole
        - Key: resource_type
          Value: AWS::IAM::Role
        - Key: prancer_unique_id
          Value: 5bef8c04-b5ea-48bb-af9b-0299baa64323
  PetsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt 'MyAPI.RootResourceId'
      PathPart: pets
      RestApiId: !Ref 'MyAPI'
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: PetsResource
        - Key: resource_type
          Value: AWS::ApiGateway::Resource
        - Key: prancer_unique_id
          Value: c869d768-c064-4190-b86e-138826d1013f
  TestStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      ClientCertificateId: ''
      StageName: test
      RestApiId: !Ref 'MyAPI'
      DeploymentId: !Ref 'Deployment'
      Description: test stage description
      AccessLogSetting:
        DestinationArn: !GetAtt 'MyLogGroup.Arn'
        Format: >-
          $context.identity.sourceIp $context.identity.caller $context.identity.user
          [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol"
          $context.status $context.responseLength $context.requestId
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: TestStage
        - Key: resource_type
          Value: AWS::ApiGateway::Stage
        - Key: prancer_unique_id
          Value: 52449a59-7a23-400a-9cd2-dfb7dce3c46b
  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join
        - '-'
        - - !Ref 'MyAPI'
          - access-logs
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: MyLogGroup
        - Key: resource_type
          Value: AWS::Logs::LogGroup
        - Key: prancer_unique_id
          Value: dac31089-0818-41fd-99eb-f7b38b97d5dd
  RequestValidator:
    Type: AWS::ApiGateway::RequestValidator
    Properties:
      Name: RequestValidatorAPI
      RestApiId: !Ref 'MyAPI'
      ValidateRequestBody: !false ''
      ValidateRequestParameters: false
      Tags:
        - Key: created_timestamp
          Value: 1646386202
        - Key: last_modified_timestamp
          Value: 1651757276
        - Key: resource_name
          Value: RequestValidator
        - Key: resource_type
          Value: AWS::ApiGateway::RequestValidator
        - Key: prancer_unique_id
          Value: '0deb9abc-37bf-4778-829f-cbca0884acfe'
Outputs:
  InvokeURL:
    Value: !Sub 'https://${MyAPI}.execute-api.${AWS::Region}.amazonaws.com/test'
