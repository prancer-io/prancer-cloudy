AWSTemplateFormatVersion: 2010-09-09
Description: >
  Example REST API with a Lambda authorizer. To invoke the API, clients must
  include specific

  header and query string values in the request.
Resources:
  MyAPI:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: example-rest-api-with-auth
      EndpointConfiguration:
        Types:
          - PRIVATE
  MyAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerCredentials: !GetAtt 
        - InvokeRole
        - Arn
      AuthorizerUri: !Sub >-
        arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyAuthFunction.Arn}/invocations
      IdentitySource: >-
        method.request.header.HeaderAuth1,method.request.querystring.QueryString1
      Name: my-authorizer
      RestApiId: !Ref MyAPI
      Type: TOKEN
  Method:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref PetsResource
      RestApiId: !Ref MyAPI
      AuthorizationType: NONE
      Integration:
        Type: HTTP_PROXY
        Uri: 'http://petstore.execute-api.us-west-1.amazonaws.com/petstore/pets'
        IntegrationHttpMethod: GET
  Deployment:
    DependsOn: Method
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref MyAPI
      StageName: tempstage
  InvokeRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: invokeauth
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - MyAuthFunction
                  - Arn
        - PolicyName: invokelambdaproxy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'lambda:InvokeFunction'
                Resource: !GetAtt 
                  - MyProxyFunction
                  - Arn
  MyAuthFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt 
        - FunctionExecutionRole
        - Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = function(event, context, callback) {
            console.log('Received event:', JSON.stringify(event, null, 2));
            // A simple request-based authorizer example to demonstrate how to use request
            // parameters to allow or deny a request. In this example, a request is
            // authorized if the client-supplied HeaderAuth1 header and QueryString1
            // query parameter match 'headerValue1' and 'queryValue1'.
            // Retrieve request parameters from the Lambda function input:
            var headers = event.headers;
            var queryStringParameters = event.queryStringParameters;
            var pathParameters = event.pathParameters;
            var stageVariables = event.stageVariables;
                
            // Parse the input for the parameter values
            var tmp = event.methodArn.split(':');
            var apiGatewayArnTmp = tmp[5].split('/');
            var awsAccountId = tmp[4];
            var region = tmp[3];
            var restApiId = apiGatewayArnTmp[0];
            var stage = apiGatewayArnTmp[1];
            var method = apiGatewayArnTmp[2];
            var resource = '/'; // root resource
            if (apiGatewayArnTmp[3]) {
                resource += apiGatewayArnTmp[3];
            }
                
            // Perform authorization to return the Allow policy for correct parameters and 
            // the 'Unauthorized' error, otherwise.
            var authResponse = {};
            var condition = {};
            condition.IpAddress = {};
            
            if (headers.HeaderAuth1 === "headerValue1"
                && queryStringParameters.QueryString1 === "queryValue1") {
                callback(null, generateAllow('me', event.methodArn));
            }  else {
                callback("Unauthorized");
            }
            }
            
            // Helper function to generate an IAM policy
            var generatePolicy = function(principalId, effect, resource) {
            // Required output:
            var authResponse = {};
            authResponse.principalId = principalId;
            if (effect && resource) {
                var policyDocument = {};
                policyDocument.Version = '2012-10-17'; // default version
                policyDocument.Statement = [];
                var statementOne = {};
                statementOne.Action = 'execute-api:Invoke'; // default action
                statementOne.Effect = effect;
                statementOne.Resource = resource;
                policyDocument.Statement[0] = statementOne;
                authResponse.policyDocument = policyDocument;
            }
            // Optional output with custom properties of the String, Number or Boolean type.
            authResponse.context = {
                "stringKey": "stringval",
                "numberKey": 123,
                "booleanKey": true
            };
            return authResponse;
            }
                
            var generateAllow = function(principalId, resource) {
                return generatePolicy(principalId, 'Allow', resource);
            }
                
            var generateDeny = function(principalId, resource) {
                return generatePolicy(principalId, 'Deny', resource);
            }
  MyProxyFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Runtime: nodejs12.x
      Role: !GetAtt 
        - FunctionExecutionRole
        - Arn
      Handler: index.handler
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from Lambda!'),
              };
              return response;
          };
  FunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
  PetsResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt 
        - MyAPI
        - RootResourceId
      PathPart: pets
      RestApiId: !Ref MyAPI
  TestStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      StageName: test
      RestApiId: !Ref MyAPI
      DeploymentId: !Ref Deployment
      Description: test stage description

  RequestValidator:
    Type: 'AWS::ApiGateway::RequestValidator'
    Properties:
      Name: RequestValidatorAPI
      RestApiId: !Ref MyAPI
      ValidateRequestBody: false
      ValidateRequestParameters: false
Outputs:
  InvokeURL:
    Value: !Sub 'https://${MyAPI}.execute-api.${AWS::Region}.amazonaws.com/test'
